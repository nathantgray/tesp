@startuml 
skinparam classAttributeIconSize 0

class HVACDSOTAgent {
    + temperatures: HVACTemperatures
    + schedule: HVACSchedule
    + forecasts: DSOTForecasts
    + asset: HVACDSOTAsset
    + rt_bidding_strategy: HVACDSOTRTBiddingStrategy
    + da_bidding_strategy: HVACDSOTDABiddingStrategy
    + house_name: str
    + meter_name: str 
    + period: int 
    + sim_time: datetime
    + helics_topic_map: dict
    + update_helics_inputs()
    + send_helics_outputs()
}
class DSOTRTMarketStateMachine {
}
class DSOTDAMarketStateMachine {
}
class DSOTRTMarketInterface {
    + clearing_price: float  
    + clearing_quantity: float 
}
class DSOTDAMarketInterface {
    + clearing_price: list 
    + clearing_quantities: list 
}
class DSOT4pointBid {
    + cumulative_curve: list
    + P 
    + Q
    + points: list
}
class HVACDSOTAsset {  
    + asset_state: HVACDSOTAssetState
    + asset_model: HVACDSOTAssetModel
}
class ThermostatModeEnum{
    + UNDEFINED
    + OFF 
    + COOLING 
    + HEATING
}
class HeatingSystemEnum{
    + UNDEFINED 
    + NONE 
    + GAS 
    + ELECTRIC 
    + HEAT_PUMP 
}
class CoolingSystemEnum{
    + UNDEFINED 
    + NONE 
    + ELECTRIC
}
class WindowFrameTypeEnum{
    + UNDEFINED
    + NONE 
    + ALUMINUM
    + THERMAL_BREAK
    + WOOD 
    + INSULATED 
}
class WindowGlazingTreatmentEnum{
    + UNDEFINED
    + CLEAR 
    + ABS 
    + REFLECTIVE
}
class WindowGlassTypeEnum{
    + UNDEFINED
    + OTHER
    + NORMAL 
    + LOW_E
}
class ETPStructureParams{
    + UA
    + CA
    + HM
    + CM
}


class DSOTForecasts {
    + price: list
    + outside_air_temperature: list
    + humidity: list
    + solar_gain: list
    + full_internal_gain: list
    + full_zipload: list
    + internal_gain: list
    + ziploads: list 
    + inside_air_temperature: list

    
}
class HVACDSOTAssetState {
    + indoor_air_temp: float
    + mass_temp: float
    + hvac_kw: float
    + wh_kw: float
    + house_kw: float
    + mtr_v: float
    + hvac_on: bool
    + thermostat_mode: ThermostateModeEnum
    + copy_attributes_from(other_obj: object)
}
class HVACDSOTEnvironmentModel{
    + name: str
    + surface_angles: dict
    + mass_internal_gain_fraction: float
    + mass_solar_gain_fraction: float
    + lat: float
    + long: float
    + humidity: float
    + latent_load_fraction: float
    + solar_direct: float
    + solar_diffuse: float
    + solar_gain: float
    + outside_air_temperature: float
    + temperature_forecast: list
    + humidity_forecast: list
    + internal_gain_forecast: list
    + solar_gain_forecast: list
    + Qi: float
    + Qh: float
    + Qh_org: float
    + Qa_ON: float
    + Qa_OFF: float
    + Qm: float
    + Qs: float
    + copy_attributes_from(other_obj: obj)
    + calc_Qh(thermostat_mode: ThermoStateMode, hvac_on: bool, heating_capacity: float, cooling_capacity: float, hvac_kW: float): tuple
    + calc_Qi(house_kW: float, wh_kW: float, thermostat_mode: ThermoStatMode, hvac_on: bool, heating_capacity: float, cooling_capacity: float, hvac_kW: float, [Qh_org: float]): float
    + calc_Qs(solar_heatgain_factor: float, solar_gain: float): float
    + calc_Qa(house_kW: float, wh_kW: float, thermostat_mode: ThermoStatMode, hvac_on: bool, heating_capacity: float, cooling_capacity: float, hvac_kW: float, [Qs: float], [Qi: float], [Qh: float], [Qh_org: float]): tuple
    + calc_Qm(house_kW: float, wh_kW: float, thermostat_mode: ThermoStatMode, hvac_on: bool, heating_capacity: float, cooling_capacity: float, hvac_kW: float, [Qs: float], [Qi: float]): float
    + calc_all_heat_flows(house_kW: float, wh_kW: float, thermostat_mode: ThermoStatMode, hvac_on: bool, heating_capacity: float, cooling_capacity: float, hvac_kW: float): tuple
    + calc_solar_flux(cpt: str, day_of_yr: int, lat: float, sol_time: float, dnr_i: float, dhr_i: float, vertical_angle: float): float
    + calc_solargain(sim_time: DateTime)
}
class HVACDSOTAssetModel {
    + temperatures: HVACTemperatures
    + environment: HVACDSOTEnvironmentModel
    + hvac_system_model: HVACDSOTSystemModel
    + asset_state: HVACDSOTAssetState
    + hvac_structure_model: HVACDSOTStructureModel
    + latent_load_fraction: float
    + heating_system_type: HeatingSystemEnum
    + cooling_system_type: CoolingSystemEnum
    + A_ETP: list
    + B_ETP_ON: list
    + B_ETP_OFF: list
    + simulate_time_step(state: HVACDSOTAssetState, environ: HVACDSOTEnvironment, temperatures: HVACTemperatures, time_step_size: TimeDelta): tuple
}
class HVACDSOTSystemModel {
    + environment: HVACDSOTEnvironmentModel
    + forecasts: DSOTForecasts
    + design_heating_capacity: float
    + heating_capacity_K0: float
    + heating_capacity_K1: float
    + heating_capacity_K2: float
    + design_cooling_capacity: float
    + cooling_capacity_K0: float
    + cooling_capacity_K1: float
    + heating_COP: float
    + heating_COP_limit: float
    + heating_COP_K0: float
    + heating_COP_K1: float
    + heating_COP_K2: float
    + heating_COP_K3: float
    + cooling_COP: float
    + cooling_COP_limit: float
    + cooling_COP_K0: float
    + cooling_COP_K1: float
    + over_sizing_factor: float
    + cooling_design_temperature: float
    + design_cooling_setpoint: float
    + design_heating_setpoint: float
    + heating_design_temperature: float
    + design_internal_gains: float
    + design_peak_solar: float
    + cooling_COP_lower_limit: float
    + cooling_COP_upper_limit: float
    + design_cooling_capacity: float
    + heating_cop_adj: float
    + cooling_cop_adj: float
    + heating_capacity: float
    + validate_attributes(): float
    + calc_heating_capacity(): float 
    + calc_cooling_capacity(): float
    + calc_heating_COP(): list
    + calc_cooling_COP(): list
    + calc_design_capacity(etp_struct_params: ETPStructureParams, heating_system_type: HeatingSystemType): tuple
}

class HVACDSOTPriceFlexibilityCurve{
    + ProfitMargin_intercept: float
    + ProfitMargin_slope: float
    + price_cap: float
    + get_flexible_price(quantity: float, DA_price_delta: float, hvac_kW: float, price_forecast: float, optimal_quantity: float): tuple
}

class HVACDSOTStructureModel{
    + sqft: float
    + stories: int
    + doors: float
    + Rroof: float
    + Rwall: float
    + Rfloor: float
    + Rdoors: float
    + Rwindows: float
    + window_transmission_coefficient: float
    + airchange_per_hour: float
    + ceiling_height: float
    + thermal_mass_per_floor_area: float
    + aspect_ratio: float
    + exterior_ceiling_fraction: float
    + exterior_floor_fraction: float
    + exterior_wall_fraction: float
    + interior_exterior_wall_ratio: float
    + WETC: float
    + glazing_layers: int
    + glass_type: int
    + window_frame: int
    + glazing_treatment: int
    + window_wall_ratio: float
    + interior_heat_transfer_coefficient: float
    + Rroof_lower_limit: float
    + Rroof_lower_limit: float
    + Rwall_lower_limit: float
    + Rwall_lower_limit: float
    + Rfloor_lower_limit: float
    + Rfloor_lower_limit: float
    + Rdoor_lower_limit: float
    + Rdoor_lower_limit: float
    + airchange_per_hour_lower_limit: float
    + airchange_per_hour_lower_limit: float
    + glazing_layers_lower_limit: float
    + glazing_layers_lower_limit: float
    + interior_air_heat_capapacity: floast
    + ceiling_area: float
    + gross_exterior_wall_area: float
    + gross_window_area: float
    + net_wall_area: float
    + floor_area: float
    + total_door_area: float
    + perimeter: float
    + etp_structure_params: ETPStructureParams
    + single_door_area: float
    + solar_heatgain_factor: float
    + validate_attributes(): None
    + lookup_window_transmission_coefficient(): float
    + lookup_Rwindow(): float
    + calc_structure_areas(): float
    + calc_heatgain_factor(): float
    + div(numerator: float, denominator: float, [def_val_if_zero_denom: float]): float
    + calc_UA(): float
    + calc_CA(): float
    + calc_HM(): float
    + calc_CM(): float
    + calc_structure_ETP_parameters(): ETPStructureParams
}

class HVACDSOTPriceFlexibilityCurve {
    + ProfitMargin_intercept: float
    + price_cap: float 
    + ProfitMargin_slope: float
    + CurveSlope: float
    + yintercept: float
    + delta_DA_price: float
}

class HVACDSOTRTBiddingStrategy {
    + bid: DSOT4pointBid
    + flexibility: HVACDSOTPriceFlexibilityCurve
    + hvac_schedule: HVACSchedule
    + bid_delay: float
    + slider: float
    + cooling_participating: float
    + heating_participating: float
    + participating: float
    + windowLength: float
    + interpolation: bool
    + RT_minute_count_interpolation: float
    + bid_quantity: float
    + bid_quantity_rt: float
    + cleared_price: float
    + bid_rt: DSOT4pointBid
    + quantity_curve: list
    + temp_curve: list
    + form_bid_for_device()
    + send_bid_to_market()
    + get_price_from_market()
    + send_price_to_device()
}
class HVACDSOTDABiddingStrategy {
    + forecasts: DSOTForecasts
    + schedule: HVACSchedule
    + temperature: HVACSchedule
    + system_model: HVACDSOTSystemModel
    + asset_state: HVACDSOTAssetState
    + structure: HVACDSOTStructureModel
    + etp_structure_params: ETPStructureParams
    + price_cap: float
    + bid_delay: float
    + cooling_participating: float
    + heating_participating: float
    + slider: float
    + windowLength: float
    + participating: float
    + temp_max_cool_da: float
    + temp_min_cool_da: float
    + temp_max_heat_da: float
    + temp_min_heat_da: float
    + forecast_temperature_min: float
    + forecast_temperature_max: float
    + forecast_temperature_delta: float
    + ramp_high_limit: float
    + ramp_low_limit: float
    + TIME: range
    + optimized_Quantity: list
    + price_forecast_0_new: float
    + price_delta: float
    + price_mean: float
    + air_temp_agent: float
    + Qopt_da_prev: float
    + temp_da_prev: float
    + previous_Q_DA: float
    + previous_T_DA: float
    + delta_Q: float
    + delta_T: float
    + bid_da: DSOT4pointBid
    + temp_room: list
    + temp_desired_48hour_cool: list
    + temp_desired_48hour_heat: list
    + latent_factor: float
    + temp_room_previous_cool: float
    + temp_room_previous_heat: float
    + temp_outside_init: float
    + ProfitMargin_intercept: float
    + temp_room_init: float
    + eps: float
    + form_bid_for_device()
    + send_bid_to_market()
    + get_price_from_market()
    + send_price_to_device()
    + update_forecast_temperature_limits(): tuple
    + update_da_indoor_temperature_limits(cooling_setpt: float, heating_setpt: float)
    + initialize_inside_air_temperature()
    + update_da_temperature_limits(sim_time: DateTime)
    + setup_da_temperature_parameters(sim_time: DateTime)
    + estimate_required_cooling_quantity(time_idx: int): float
    + estimate_required_heating_quantity(time_idx: int): float
    + get_uncntrl_hvac_load(sim_time: DateTime): float
    + temperature_bound_rule(m: ConcreteModle, t: int): tuple
    + obj_rule(m: ConcreteModle): float
    + con_rule_eq1(m: ConcreteModel, i: int)
    + solve_for_da_optimal_quantities(): tuple
}
class HVACSchedule{
    + wakeup_start: float 
    + daylight_start: float 
    + evening_start: float 
    + night_start: float 
    + weekend_day_start: float 
    + weekend_night_start: float 
    + ramp_high_limit: float
    + ramp_low_limit: float
    + ramp_low_cool: float
    + ramp_high_cool: float
    + ramp_low_heat: float
    + ramp_high_heat: float
    + range_high_limit: float
    + range_low_limit: float
    + range_low_cool: float
    + range_high_cool: float
    + range_low_heat: float
    + range_high_heat: float
    + temp_max_cool: float
    + temp_min_cool: float
    + temp_max_heat: float
    + temp_min_heat: float
    + validate_inputs()
    + get_scheduled_setpoint(hour_of_day: int, day_of_week: int): tuple
    + change_basepoint(sim_time: DateTime, temperatures: HVACTemperatures, [model_diag_level: int]): bool
    + calc_thermostat_setting(temperatures: HVACTemperatures, slider: float, [model_diag_level: int]): None
}
class HVACTemperatures{
    + T_lower_limit: float 
    + T_upper_limit: float 
    + cooling_setpoint_lower: float 
    + cooling_setpoint_upper: float 
    + heating_setpoint_lower: float
    + heating_setpoint_upper: float
    + basepoint_cooling: float
    + basepoint_heating: float
    + cooling_setpoint: float
    + heating_setpoint: float
    + wakeup_set_cool: float
    + daylight_set_cool: float
    + evening_set_cool: float
    + night_set_cool: float
    + weekend_day_set_cool: float
    + weekend_night_set_cool: float
    + wakeup_set_heat: float
    + daylight_set_heat: float
    + evening_set_heat: float
    + night_set_heat: float
    + weekend_day_set_heat: float
    + weekend_night_set_heat: float
    + deadband: float
    + validate_inputs()
}



HVACDSOTAgent "1" *-- "1" HVACDSOTRTBiddingStrategy
HVACDSOTAgent "1" *-- "1" HVACDSOTDABiddingStrategy
HVACDSOTAgent "1" *-- "1" DSOTRTMarketInterface
HVACDSOTAgent "1" *-- "1" DSOTDAMarketInterface
HVACDSOTAgent "1" *-- "1" HVACDSOTAsset
HVACDSOTAgent "1" *-- "1" HVACSchedule
HVACDSOTAgent "1" *-- "1" HVACTemperatures
HVACDSOTAgent "1" *-- "1" DSOTForecasts
HVACDSOTAgent "1" *-- "1" HVACDSOTPriceFlexibilityCurve


HVACDSOTAsset "1" *-- "1" HVACDSOTAssetModel 
HVACDSOTAsset "1" *-- "1" HVACDSOTAssetState

DSOTRTMarketInterface "1" *-- "1" DSOTRTMarketStateMachine
DSOTDAMarketInterface "1" *-- "1" DSOTDAMarketStateMachine
HVACDSOTRTBiddingStrategy "1" *-- "1" DSOT4pointBid
HVACDSOTDABiddingStrategy "48" *-- "1" DSOT4pointBid
HVACDSOTAssetModel "1" *-- "1" HVACDSOTEnvironmentModel
HVACDSOTAssetState "1" *-- "1" ThermostatModeEnum
HVACDSOTAssetModel "1" *-- "1" HeatingSystemEnum
HVACDSOTAssetModel "1" *-- "1" CoolingSystemEnum
HVACDSOTAssetModel "1" *-- "1"  HVACDSOTSystemModel
HVACDSOTAssetModel "1" *-- "1"  HVACDSOTStructureModel
HVACDSOTStructureModel "1" *-- "1"  WindowFrameTypeEnum
HVACDSOTStructureModel "1" *-- "1"  WindowGlazingTreatmentEnum
HVACDSOTStructureModel "1" *-- "1"  WindowGlassTypeEnum
HVACDSOTStructureModel "1" *-- "1" ETPStructureParams


@enduml